View(sales)
unique(sales$Sub.Category)
test <- sales[sales$Sub.Category=="Tables",]
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
h <- hash()
for (i in 1:length(nums_vector)) {
h[nums_vector[i]] <- nums_vector
}
for (j in seq(h)) {
if (has.key(toString(nums_vector[j]), h)) {
for (k in get(toString(nums_vector[j]), h)) {
sum <- k + j
if (sum == target) {
print(c(which(nums_vector == j), which(nums_vector == k)))
}
}
}
}
h
library(tidyr)
data(who)
data(population)
library(tidyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age)
library(tidyr)
library(dplyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age)
View(who2)
?separate
View(who)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year'))
View(who2)
gc()
library(tidyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age)
View(who2)
View(who2)
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
library(hash)
hash_table <- hash()
for( i in 1:length(nums)){
compliment = target - nums[i]
hash_table[compliment] <- i
}
View(hash_table)
nums
names(hash_table)
two_sum <- function(nums,target){
hash_table <- hash()
for( i in 1:length(nums)){
compliment = target - nums[i]
hash_table[compliment] <- i
}
for( i in 1:length(nums)){
if( nums[i] %in% as.integer(names(hash_table))){
key <- as.character(nums[i])
second_index = hash_table[[key]]
print(paste(i,second_index))
}
}
}
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums,target)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
getcd()
getcwd()
getwd()
setwd("C:/Users/jlowh/Documents/DSE5002")
getwd()
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
?rename
### Using the Pipe
sales %>% # the pipe  (%>%) allows you to write multi-line functions passing the same data to each line of code
rename(Row.ID = Ã¯..Row.ID) %>%
slice_max(Row.ID) %>% #slice the rows with the maximum Row.ID (should be one row)
select(Row.ID)
unique(sales$Segment)
#simple aggregation
sales %>%
group_by(Segment) %>%
summarize(sum_of_sales = sum(Sales))
#EX2
#multiple groups & multiple metrics
sales %>%
group_by(Segment,Category) %>%
summarize(sales=sum(Sales),
transactions = n(),
distinct_products = n_distinct(Product.Name),
average_transaction_sale = sum(sales) / n())
### Mutate
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y'),
First.Name = stringr::str_split(Customer.Name,' ',simplify = T)[,1], #must use string simplify = TRUE to properly split in mutate
Last.Name = stringr::str_split(Customer.Name, ' ',simplify = T)[,2] #must use string simplify = TRUE to properly split in mutate
)
sales$First.Name[1:5]
inherits(sales$Order.Date, 'Date')
###Joins and Unions
# data frame 1
df1 = data.frame(CustomerId = c(1:6), Product = c("Oven","Television","Mobile","WashingMachine","Lightings","Ipad"))
df1
# data frame 2
df2 = data.frame(CustomerId = c(2, 4, 6, 7, 8), State = c("California","Newyork","Santiago","Texas","Indiana"))
df2
#left join, all keys on the left combines with matches on right
left_df <- df1 %>%
left_join(df2,by='CustomerId')
left_df
right_df <- df1 %>%
right_join(df2,by='CustomerId')
right_df
#full join, all keys returned
full_df <- df1 %>%
full_join(df2,by='CustomerId')
full_df
#inner join, only matches on both returned
inner_df <- df1 %>%
inner_join(df2,by='CustomerId')
inner_df
df1
left_df
#binding columns and rows (unions)
df1 %>% bind_cols(left_df)
#stacking data frames ( bind rows)
left_df %>% bind_rows(right_df)
library(tidyr)
#the relig_income dataset comes with the tidyr package
data(relig_income)
head(relig_income)
relig_long <- relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
head(relig_long)
?pivot_longer
relig_long <- relig_income %>%
pivot_longer( names_to = "income", values_to = "count")
head(relig_long)
relig_long <- relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
head(relig_long)
relig_long <- relig_income %>%
pivot_longer(religion, names_to = "income", values_to = "count")
head(relig_long)
relig_long <- relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
head(relig_long)
#fish_ecounters also comes with the tidyr package
data(fish_encounters)
head(fish_encounters)
head(relig_long)
data(fish_encounters)
head(fish_encounters)
fish_wide <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen)
head(fish_wide)
#simply drop them
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
drop_na()
?replace_na
?mutate
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(4:12), ~replace_na(.,0))
head(wide_fish_na)
#splitting cells
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge')
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
sales[1490,]
#splitting cells
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales[1490,]
sales2 <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge')
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge')
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
sales[1490,'Last.Name']
sales[1490,'First.Name']
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
#,extra='merge'
)
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge'
)
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
sales <- sales %>%
unite(col = 'Customer.Name', First.Name:Last.Name,sep='_')
head(sales$Customer.Name)
library(ggplot2)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
#basic example
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y')
)
library(ggplot2)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
#basic example
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y')
)
ggplot(sales,aes(x=Category)) +
geom_bar()
sales %>%
ggplot(aes(x=Category)) +
geom_bar()
?geom_bar
#axis labels & title with a custom scale & color
ggplot(sales,aes(x=Category,fill=Category)) +
geom_bar() +
labs(x='Categories',
y='Transactions',
title='Transactions by Category') +
scale_y_continuous(breaks=c(1500,2000,4000,6000))
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(y=Profit,x=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
# geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(y=Profit,x=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(y=Profit,x=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
sales %>%
ggplot() +
geom_bar(aes(x=Category))
h <- hash()
for(i in seq_along(nums_vector)){
k <- target-nums_vector[i]
h<-hash(key=k[i], values=nums_vector[i])
}
for(j in seq_along(nums_vector)){
if(nums_vector[j] %in% k){
m<-nums_vector[j]
n<-nums_vector[i]
answer<-c(m,n)
print(answer)
}
}
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
h <- hash()
for(i in seq_along(nums_vector)){
k <- target-nums_vector[i]
h<-hash(key=k[i], values=nums_vector[i])
}
for(j in seq_along(nums_vector)){
if(nums_vector[j] %in% k){
m<-nums_vector[j]
n<-nums_vector[i]
answer<-c(m,n)
print(answer)
}
}
h
h <- hash()
for(i in seq_along(nums_vector)){
k <- target-nums_vector[i]
h<-hash(key=k[i], values=nums_vector[i])
}
View(h)
h <- hash()
for(i in seq_along(nums_vector)){
k <- target-nums_vector[i]
h[k] <- i
#h<-hash(key=k[i], values=nums_vector[i])
}
for(j in seq_along(nums_vector)){
if(nums_vector[j] %in% k){
m<-nums_vector[j]
n<-nums_vector[i]
answer<-c(m,n)
print(answer)
}
}
View(h)
nums_vector[j] %in% k
k
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
for(i in seq_along(nums)) {
for(j in seq_along(nums)[-length(nums)]){
if (nums[i] + nums [j+1] == target){
indexes <- c(i,j+1)
return(indexes)
}
}
}
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
for(i in seq_along(nums)) {
for(j in seq_along(nums)[-length(nums)]){
if (nums[i] + nums [j+1] == target){
indexes <- c(i,j+1)
print(indexes)
}
}
}
for(i in seq_along(nums)){
h <- as.integer(nums[i], i)
print(h)
}
library(tidyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age) %>%
mutate(min_age = ifelse(max_age=='65','65',min_age),
max_age = ifelse(max_age=='65','Inf',max_age)
) %>%
unite("age_range",min_age:max_age,sep='-')
agg1 <- who2 %>%
group_by(diagnosis,gender) %>%
summarize(count = sum(count,na.rm=T))
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
agg2 <- who2 %>%
group_by(year,gender,diagnosis) %>%
summarize(percent_pop = sum(count,na.rm=T)/mean(population,na.rm=T))%>%
drop_na()
ggplot(agg2,aes(x=year,y=percent_pop,color=gender)) +
geom_line() +
facet_grid(diagnosis~.)
View(who2)
View(who2)
library(tidyr)
data(who)
data(population)
who2 <- who
View(who)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
#names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
my_who_long <- who %>%
pivot_longer(!c(country, iso2, iso3, year),
names_to = "code",
values_to = "count",)
View(who)
View(my_who_long)
View(my_who_long)
test = str_split('new_?(.*)_(.)(.*)',my_who_long$code)
str_split('new_?(.*)_(.)(.*)',my_who_long$code)
?str_split
stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
View(who2)
library(tidyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
View(who2)
View(my_who_long)
View(who2)
strsplit('new_?(.*)_(.)(.*)',my_who_long$code)
strsplit(my_who_long$code,'new_?(.*)_(.)(.*)')
test = strsplit(my_who_long$code,'new_?(.*)_(.)(.*)')
test = stringr::str_split(my_who_long$code,'new_?(.*)_(.)(.*)')
test = stringr::str_split(string=my_who_long$code,pattern='new_?(.*)_(.)(.*)')
test = stringr::str_split(pattern='new_?(.*)_(.)(.*)',string=my_who_long$code)
test = stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
test = stringr::str_split('new_?(.*)_(.)(.*)',my_who_long$code)
?strsplit
strsplit('new_?(.*)_(.)(.*)',my_who_long$code,perl=TRUE)
test = strsplit('new_?(.*)_(.)(.*)',x=my_who_long$code,perl=TRUE)
test = strsplit(my_who_long$code,'new_?(.*)_(.)(.*)',perl=TRUE)
?pivot_longer
?separate
separate(my_who_long$code,'new_?(.*)_(.)(.*)')
separate(my_who_long,code,'new_?(.*)_(.)(.*)')
separate(my_who_long,code,'new_?(.*)_(.)(.*)', into= c('col1','col2','col3'))
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf(3)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
f
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
f(5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
g(3)
gc()
